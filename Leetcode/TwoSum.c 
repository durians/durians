
//https://leetcode.com/problems/two-sum/
//durians
//2015-5-10

/*
Given an array of integers, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2

*/

/*****
The easy solution is O(n^2), Time Limit Exceeded
for(i = 0; i < numsSize; i++)
{
    for( j = i + 1; j < numsSize; j++)
    {
        if(nums[i] + nums[j] == target)
        {
            index1 = i+1;
            index2 = j+1;
            break;
        }
    }
}

the nestd loop just for searching,
so we can use hashmap to redunce search time complexity from O(n) to O(1)

```
for(i = 0; i < numsSize; i++)
	hash[ nums[i] ] = i + 1;
```

but,be careful,if there are duplication numbers in array,
how the map store the positions for all of same numbers? such as:
numbers={2,3,4,4,9}, target=8

And , if there are negative numbers,how to store? such as:
numbers={-200,200,24,9}, target=0

******/


int main()
{
    
}

